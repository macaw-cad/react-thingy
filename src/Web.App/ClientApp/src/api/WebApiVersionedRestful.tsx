/* Generated by restful-react */

import React from "react";
import { Get, GetProps, useGet, UseGetProps, Mutate, MutateProps, useMutate, UseMutateProps } from "restful-react";

export type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;

export type ProblemDetailsExtended = ProblemDetails & {traceIdentifier?: string; [key: string]: any};

export interface ProblemDetails {type?: string; title?: string; status?: number; detail?: string; instance?: string; [key: string]: any}

export type ProblemDetailsExtendedOfConflictDetails = ProblemDetailsExtended & {errorDetails?: ConflictDetails; [key: string]: any};

export type ConflictDetails = ErrorDetails & {name?: string; url?: string};

export interface ErrorDetails {[key: string]: any}

export type ProblemDetailsExtendedOfErrorDetailsException = ProblemDetailsExtended & {errorDetails?: ErrorDetailsException; [key: string]: any};

export type ErrorDetailsException = ErrorDetails & {message?: string; stackTrace?: string; innerExceptionMessage?: string};

export type ResponseTrigger = number;

export interface GetBodyInput {name?: string}

export type VersionedV1GetProps = Omit<GetProps<void, ProblemDetailsExtended | ProblemDetailsExtendedOfConflictDetails | ProblemDetailsExtendedOfErrorDetailsException, void>, "path"> & {value: number};

// Minimal sample implementation of version 1 of the versioned service.
export const VersionedV1Get = ({value, ...props}: VersionedV1GetProps) => (
  <Get<void, ProblemDetailsExtended | ProblemDetailsExtendedOfConflictDetails | ProblemDetailsExtendedOfErrorDetailsException, void>
    path={`/api/v1/versioned/${value}`}
    {...props}
  />
);

export type UseVersionedV1GetProps = Omit<UseGetProps<void, void>, "path"> & {value: number};

// Minimal sample implementation of version 1 of the versioned service.
export const useVersionedV1Get = ({value, ...props}: UseVersionedV1GetProps) => useGet<void, ProblemDetailsExtended | ProblemDetailsExtendedOfConflictDetails | ProblemDetailsExtendedOfErrorDetailsException, void>(`/api/v1/versioned/${value}`, props);


export type VersionedV1ReturnBadRequestProps = Omit<GetProps<void, ProblemDetailsExtendedOfErrorDetailsException, void>, "path">;

// ReturnBadRequest - should throw exception
export const VersionedV1ReturnBadRequest = (props: VersionedV1ReturnBadRequestProps) => (
  <Get<void, ProblemDetailsExtendedOfErrorDetailsException, void>
    path={`/api/v1/versioned/ReturnBadRequest`}
    {...props}
  />
);

export type UseVersionedV1ReturnBadRequestProps = Omit<UseGetProps<void, void>, "path">;

// ReturnBadRequest - should throw exception
export const useVersionedV1ReturnBadRequest = (props: UseVersionedV1ReturnBadRequestProps) => useGet<void, ProblemDetailsExtendedOfErrorDetailsException, void>(`/api/v1/versioned/ReturnBadRequest`, props);


export type VersionedV1ReturnBadRequestWithStringProps = Omit<GetProps<void, ProblemDetailsExtended, void>, "path">;

// ReturnBadRequestWithString - should override ProblemDetails detail
export const VersionedV1ReturnBadRequestWithString = (props: VersionedV1ReturnBadRequestWithStringProps) => (
  <Get<void, ProblemDetailsExtended, void>
    path={`/api/v1/versioned/ReturnBadRequestWithString`}
    {...props}
  />
);

export type UseVersionedV1ReturnBadRequestWithStringProps = Omit<UseGetProps<void, void>, "path">;

// ReturnBadRequestWithString - should override ProblemDetails detail
export const useVersionedV1ReturnBadRequestWithString = (props: UseVersionedV1ReturnBadRequestWithStringProps) => useGet<void, ProblemDetailsExtended, void>(`/api/v1/versioned/ReturnBadRequestWithString`, props);


export type VersionedV1WithBodyProps = Omit<GetProps<void, ProblemDetailsExtended, void>, "path">;

// WithBody - call with GET body. Note: on Swagger use POST.
export const VersionedV1WithBody = (props: VersionedV1WithBodyProps) => (
  <Get<void, ProblemDetailsExtended, void>
    path={`/api/v1/versioned/WithBody`}
    {...props}
  />
);

export type UseVersionedV1WithBodyProps = Omit<UseGetProps<void, void>, "path">;

// WithBody - call with GET body. Note: on Swagger use POST.
export const useVersionedV1WithBody = (props: UseVersionedV1WithBodyProps) => useGet<void, ProblemDetailsExtended, void>(`/api/v1/versioned/WithBody`, props);


export type VersionedV1WithBody2Props = Omit<MutateProps<void, ProblemDetailsExtended, void, GetBodyInputRequestBody>, "path" | "verb">;

// WithBody - call with GET body. Note: on Swagger use POST.
export const VersionedV1WithBody2 = (props: VersionedV1WithBody2Props) => (
  <Mutate<void, ProblemDetailsExtended, void, GetBodyInputRequestBody>
    verb="POST"
    path={`/api/v1/versioned/WithBody`}
    {...props}
  />
);

export type UseVersionedV1WithBody2Props = Omit<UseMutateProps<void, void, GetBodyInputRequestBody>, "path" | "verb">;

// WithBody - call with GET body. Note: on Swagger use POST.
export const useVersionedV1WithBody2 = (props: UseVersionedV1WithBody2Props) => useMutate<void, ProblemDetailsExtended, void, GetBodyInputRequestBody>("POST", `/api/v1/versioned/WithBody`, props);


export type VersionedV2GetProps = Omit<GetProps<void, ProblemDetailsExtended | ProblemDetailsExtendedOfConflictDetails | ProblemDetailsExtendedOfErrorDetailsException, void>, "path"> & {value: number};

// Minimal sample implementation of version 2 of the versioned service.
export const VersionedV2Get = ({value, ...props}: VersionedV2GetProps) => (
  <Get<void, ProblemDetailsExtended | ProblemDetailsExtendedOfConflictDetails | ProblemDetailsExtendedOfErrorDetailsException, void>
    path={`/api/v2/versioned/${value}`}
    {...props}
  />
);

export type UseVersionedV2GetProps = Omit<UseGetProps<void, void>, "path"> & {value: number};

// Minimal sample implementation of version 2 of the versioned service.
export const useVersionedV2Get = ({value, ...props}: UseVersionedV2GetProps) => useGet<void, ProblemDetailsExtended | ProblemDetailsExtendedOfConflictDetails | ProblemDetailsExtendedOfErrorDetailsException, void>(`/api/v2/versioned/${value}`, props);

