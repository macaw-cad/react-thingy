{"version":3,"sources":["webpack:///./src/counter/Counter.tsx"],"names":[],"mappings":";;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAEO,MAAM,OAAO,GAAG,MAAK;AACxB,QAAM,kBAAkB,GAAG,wDAAU,CAAC,sEAAD,CAAV,CAA+B,kBAA1D;AACA,QAAM,QAAQ,GAAG,+DAAW,EAA5B;AACA,QAAM,KAAK,GAAG,+DAAW,CAAE,KAAD,IAAsB,KAAK,CAAC,OAAN,CAAc,KAArC,CAAzB;AACA,QAAM,UAAU,GAAG,+DAAW,CAAE,KAAD,IAAsB,KAAK,CAAC,IAAN,CAAW,UAAlC,CAA9B;;AAEA,QAAM,WAAW,GAAG,MAAM,QAAQ,CAAC,iEAAS,CAAC,CAAD,CAAV,CAAlC;;AACA,QAAM,WAAW,GAAG,MAAM,QAAQ,CAAC,iEAAS,CAAC,CAAD,CAAV,CAAlC,CAPwB,CASxB;AACA;AACA;AACA;AACA;;;AACA,QAAM,4BAA4B,GAAG,MAAW;AAC5C,eAAW;AACd,GAFD;;AAIA,QAAM,WAAW,GAAG,MAAW;AAC3B,UAAM,YAAY,GAAG,2DAAK,CAAC,IAAD,EAAO,WAAP,CAA1B;AACA,sBAAkB,CAAC,OAAnB,CAA2B,YAAY,CAAC,OAAxC;AACH,GAHD;;AAKA,MAAI,wDAAW,CAAC,QAAhB,EAA0B;AACtB,sBAAkB,CAAC,mCAAnB,CAAuD,4BAAvD;AACH;;AAED,yDAAS,CAAC,MAAK;AACX,QAAI,CAAC,UAAL,EAAiB;AACb,iBAAW;AACd;AACJ,GAJQ,EAIN,EAJM,CAAT,CA3BwB,CA+BhB;;AAER,SACI,wEACI,sE,WAAA,EACc,KADd,E,QAAA,EAEH,GAFG,EAGI;AAAQ,WAAO,EAAE;AAAjB,KAA4B,GAA5B,CAHJ,EAMK,GANL,EAOI;AAAQ,WAAO,EAAE;AAAjB,KAA4B,GAA5B,CAPJ,CADJ,CADJ;AAeH,CAhDM;AAkDQ,sEAAf,E","file":"counter-Counter.js","sourcesContent":["import React, { useContext, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { RootState } from '../store/RootState';\r\nimport { later } from '../sample/later';\r\nimport { ApplicationContext } from '../ApplicationContext';\r\nimport { Environment } from '../Environment';\r\nimport { increment, decrement } from './CounterActions';\r\n\r\nexport const Counter = () => {\r\n    const applicationContext = useContext(ApplicationContext).applicationContext;\r\n    const dispatch = useDispatch();\r\n    const value = useSelector((state: RootState) => state.counter.value);\r\n    const isHydrated = useSelector((state: RootState) => state.page.isHydrated);\r\n\r\n    const onIncrement = () => dispatch(increment(1));\r\n    const onDecrement = () => dispatch(decrement(1));\r\n\r\n    // componentDidRenderServerSide() is registered in the constructor when the component is rendered at server-side.\r\n    // Registered functions are invoked by Hypernova server-side rendering immediately after the render() of the\r\n    // toplevel Hypernova component is finished and the whole component tree is ready.\r\n    // If this function does async calls, register them using addTask from applicationContext so the final rendering of\r\n    // the toplevel Hypernova component does execute after the async calls initiated from this function are completed.\r\n    const componentDidRenderServerSide = (): void => {\r\n        doIncrement();\r\n    };\r\n\r\n    const doIncrement = (): void => {\r\n        const laterContext = later(1000, onIncrement);\r\n        applicationContext.addTask(laterContext.promise);\r\n    };\r\n\r\n    if (Environment.isServer) {\r\n        applicationContext.addComponentDidRenderServerSideFunc(componentDidRenderServerSide);\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!isHydrated) {\r\n            doIncrement();\r\n        }\r\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    return (\r\n        <div>\r\n            <p>\r\n                Clicked: {value} times\r\n        {' '}\r\n                <button onClick={onIncrement}>\r\n                    +\r\n        </button>\r\n                {' '}\r\n                <button onClick={onDecrement}>\r\n                    -\r\n        </button>\r\n            </p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Counter;"],"sourceRoot":""}