{"version":3,"sources":["webpack:///./src/counter/Counter.tsx"],"names":["Counter","applicationContext","dispatch","value","state","counter","isHydrated","page","onIncrement","componentDidRenderServerSide","doIncrement","laterContext","addTask","promise","isServer","addComponentDidRenderServerSideFunc","onClick"],"mappings":";kEAAA,yGAQO,MAAMA,EAAU,KACnB,MAAMC,EAAqB,qBAAW,KAAoBA,mBACpDC,EAAW,cACXC,EAAQ,YAAaC,GAAqBA,EAAMC,QAAQF,OACxDG,EAAa,YAAaF,GAAqBA,EAAMG,KAAKD,YAE1DE,EAAc,IAAMN,EAAS,YAAU,IAQvCO,EAA+B,KACjCC,KAGEA,EAAc,KAChB,MAAMC,EAAe,YAAM,IAAMH,GACjCP,EAAmBW,QAAQD,EAAaE,UAa5C,OAVI,IAAYC,UACZb,EAAmBc,oCAAoCN,GAG3D,oBAAU,KACDH,GACDI,KAEL,IAGC,6BACI,2B,YACcP,E,SACjB,IACO,4BAAQa,QAASR,GAAW,KAG3B,IACD,4BAAQQ,QAnCA,IAAMd,EAAS,YAAU,KAmCL,QAQ7B","file":"counter-Counter.js","sourcesContent":["import React, { useContext, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { RootState } from '../store/RootState';\r\nimport { later } from '../sample/later';\r\nimport { ApplicationContext } from '../ApplicationContext';\r\nimport { Environment } from '../Environment';\r\nimport { increment, decrement } from './CounterActions';\r\n\r\nexport const Counter = () => {\r\n    const applicationContext = useContext(ApplicationContext).applicationContext;\r\n    const dispatch = useDispatch();\r\n    const value = useSelector((state: RootState) => state.counter.value);\r\n    const isHydrated = useSelector((state: RootState) => state.page.isHydrated);\r\n\r\n    const onIncrement = () => dispatch(increment(1));\r\n    const onDecrement = () => dispatch(decrement(1));\r\n\r\n    // componentDidRenderServerSide() is registered in the constructor when the component is rendered at server-side.\r\n    // Registered functions are invoked by Hypernova server-side rendering immediately after the render() of the\r\n    // toplevel Hypernova component is finished and the whole component tree is ready.\r\n    // If this function does async calls, register them using addTask from applicationContext so the final rendering of\r\n    // the toplevel Hypernova component does execute after the async calls initiated from this function are completed.\r\n    const componentDidRenderServerSide = (): void => {\r\n        doIncrement();\r\n    };\r\n\r\n    const doIncrement = (): void => {\r\n        const laterContext = later(1000, onIncrement);\r\n        applicationContext.addTask(laterContext.promise);\r\n    };\r\n\r\n    if (Environment.isServer) {\r\n        applicationContext.addComponentDidRenderServerSideFunc(componentDidRenderServerSide);\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!isHydrated) {\r\n            doIncrement();\r\n        }\r\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    return (\r\n        <div>\r\n            <p>\r\n                Clicked: {value} times\r\n        {' '}\r\n                <button onClick={onIncrement}>\r\n                    +\r\n        </button>\r\n                {' '}\r\n                <button onClick={onDecrement}>\r\n                    -\r\n        </button>\r\n            </p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Counter;"],"sourceRoot":""}