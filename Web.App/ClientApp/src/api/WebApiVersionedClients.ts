/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.1.0.0 (NJsonSchema v10.0.24.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

export interface IVersionedV1Client {
    /**
     * Minimal sample implementation of version 1 of the versioned service.
     * @param value A value 0..4 for different error conditions.
     */
    get(value: number): Promise<void>;
    /**
     * ReturnBadRequest - should throw exception
     */
    returnBadRequest(): Promise<void>;
    /**
     * ReturnBadRequestWithString - should override ProblemDetails detail
     */
    returnBadRequestWithString(): Promise<void>;
    /**
     * WithBody - call with GET body. Note: on Swagger use POST.
     */
    withBody(input: GetBodyInput): Promise<void>;
    /**
     * WithBody - call with GET body. Note: on Swagger use POST.
     */
    withBody2(input: GetBodyInput): Promise<void>;
}

export class VersionedV1Client implements IVersionedV1Client {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * Minimal sample implementation of version 1 of the versioned service.
     * @param value A value 0..4 for different error conditions.
     */
    get(value: number): Promise<void> {
        let url_ = this.baseUrl + "/api/v1/versioned/{value}";
        if (value === undefined || value === null)
            throw new Error("The parameter 'value' must be defined.");
        url_ = url_.replace("{value}", encodeURIComponent("" + value)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGet(_response);
        });
    }

    protected processGet(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetailsExtended.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetailsExtended.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            });
        } else if (status === 409) {
            return response.text().then((_responseText) => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = ProblemDetailsExtendedOfConflictDetails.fromJS(resultData409);
            return throwException("A server side error occurred.", status, _responseText, _headers, result409);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ProblemDetailsExtendedOfErrorDetailsException.fromJS(resultData500);
            return throwException("A server side error occurred.", status, _responseText, _headers, result500);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * ReturnBadRequest - should throw exception
     */
    returnBadRequest(): Promise<void> {
        let url_ = this.baseUrl + "/api/v1/versioned/ReturnBadRequest";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processReturnBadRequest(_response);
        });
    }

    protected processReturnBadRequest(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ProblemDetailsExtendedOfErrorDetailsException.fromJS(resultData500);
            return throwException("A server side error occurred.", status, _responseText, _headers, result500);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * ReturnBadRequestWithString - should override ProblemDetails detail
     */
    returnBadRequestWithString(): Promise<void> {
        let url_ = this.baseUrl + "/api/v1/versioned/ReturnBadRequestWithString";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processReturnBadRequestWithString(_response);
        });
    }

    protected processReturnBadRequestWithString(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ProblemDetailsExtended.fromJS(resultData500);
            return throwException("A server side error occurred.", status, _responseText, _headers, result500);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * WithBody - call with GET body. Note: on Swagger use POST.
     */
    withBody(input: GetBodyInput): Promise<void> {
        let url_ = this.baseUrl + "/api/v1/versioned/WithBody";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ = <RequestInit>{
            body: content_,
            method: "GET",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processWithBody(_response);
        });
    }

    protected processWithBody(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ProblemDetailsExtended.fromJS(resultData500);
            return throwException("A server side error occurred.", status, _responseText, _headers, result500);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * WithBody - call with GET body. Note: on Swagger use POST.
     */
    withBody2(input: GetBodyInput): Promise<void> {
        let url_ = this.baseUrl + "/api/v1/versioned/WithBody";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processWithBody2(_response);
        });
    }

    protected processWithBody2(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ProblemDetailsExtended.fromJS(resultData500);
            return throwException("A server side error occurred.", status, _responseText, _headers, result500);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }
}

export interface IVersionedV2Client {
    /**
     * Minimal sample implementation of version 2 of the versioned service.
     * @param value A value 0..4 for different error conditions.
     */
    get(value: number): Promise<void>;
}

export class VersionedV2Client implements IVersionedV2Client {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * Minimal sample implementation of version 2 of the versioned service.
     * @param value A value 0..4 for different error conditions.
     */
    get(value: number): Promise<void> {
        let url_ = this.baseUrl + "/api/v2/versioned/{value}";
        if (value === undefined || value === null)
            throw new Error("The parameter 'value' must be defined.");
        url_ = url_.replace("{value}", encodeURIComponent("" + value)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGet(_response);
        });
    }

    protected processGet(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetailsExtended.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetailsExtended.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            });
        } else if (status === 409) {
            return response.text().then((_responseText) => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = ProblemDetailsExtendedOfConflictDetails.fromJS(resultData409);
            return throwException("A server side error occurred.", status, _responseText, _headers, result409);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ProblemDetailsExtendedOfErrorDetailsException.fromJS(resultData500);
            return throwException("A server side error occurred.", status, _responseText, _headers, result500);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }
}

export class ProblemDetails implements IProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;

    constructor(data?: IProblemDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.type = data["type"];
            this.title = data["title"];
            this.status = data["status"];
            this.detail = data["detail"];
            this.instance = data["instance"];
        }
    }

    static fromJS(data: any): ProblemDetails {
        data = typeof data === 'object' ? data : {};
        let result = new ProblemDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        data["title"] = this.title;
        data["status"] = this.status;
        data["detail"] = this.detail;
        data["instance"] = this.instance;
        return data; 
    }
}

export interface IProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;
}

export abstract class ProblemDetailsExtended extends ProblemDetails implements IProblemDetailsExtended {
    traceIdentifier?: string | undefined;

    constructor(data?: IProblemDetailsExtended) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.traceIdentifier = data["traceIdentifier"];
        }
    }

    static fromJS(data: any): ProblemDetailsExtended {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'ProblemDetailsExtended' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["traceIdentifier"] = this.traceIdentifier;
        super.toJSON(data);
        return data; 
    }
}

export interface IProblemDetailsExtended extends IProblemDetails {
    traceIdentifier?: string | undefined;
}

export abstract class ProblemDetailsExtendedOfConflictDetails extends ProblemDetailsExtended implements IProblemDetailsExtendedOfConflictDetails {
    errorDetails?: ConflictDetails | undefined;

    constructor(data?: IProblemDetailsExtendedOfConflictDetails) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.errorDetails = data["errorDetails"] ? ConflictDetails.fromJS(data["errorDetails"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ProblemDetailsExtendedOfConflictDetails {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'ProblemDetailsExtendedOfConflictDetails' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["errorDetails"] = this.errorDetails ? this.errorDetails.toJSON() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

export interface IProblemDetailsExtendedOfConflictDetails extends IProblemDetailsExtended {
    errorDetails?: ConflictDetails | undefined;
}

export class ErrorDetails implements IErrorDetails {

    constructor(data?: IErrorDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
    }

    static fromJS(data: any): ErrorDetails {
        data = typeof data === 'object' ? data : {};
        let result = new ErrorDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data; 
    }
}

export interface IErrorDetails {
}

export class ConflictDetails extends ErrorDetails implements IConflictDetails {
    name?: string | undefined;
    url?: string | undefined;

    constructor(data?: IConflictDetails) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.name = data["name"];
            this.url = data["url"];
        }
    }

    static fromJS(data: any): ConflictDetails {
        data = typeof data === 'object' ? data : {};
        let result = new ConflictDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["url"] = this.url;
        super.toJSON(data);
        return data; 
    }
}

export interface IConflictDetails extends IErrorDetails {
    name?: string | undefined;
    url?: string | undefined;
}

export abstract class ProblemDetailsExtendedOfErrorDetailsException extends ProblemDetailsExtended implements IProblemDetailsExtendedOfErrorDetailsException {
    errorDetails?: ErrorDetailsException | undefined;

    constructor(data?: IProblemDetailsExtendedOfErrorDetailsException) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.errorDetails = data["errorDetails"] ? ErrorDetailsException.fromJS(data["errorDetails"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ProblemDetailsExtendedOfErrorDetailsException {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'ProblemDetailsExtendedOfErrorDetailsException' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["errorDetails"] = this.errorDetails ? this.errorDetails.toJSON() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

export interface IProblemDetailsExtendedOfErrorDetailsException extends IProblemDetailsExtended {
    errorDetails?: ErrorDetailsException | undefined;
}

export class ErrorDetailsException extends ErrorDetails implements IErrorDetailsException {
    message?: string | undefined;
    stackTrace?: string | undefined;
    innerExceptionMessage?: string | undefined;

    constructor(data?: IErrorDetailsException) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.message = data["message"];
            this.stackTrace = data["stackTrace"];
            this.innerExceptionMessage = data["innerExceptionMessage"];
        }
    }

    static fromJS(data: any): ErrorDetailsException {
        data = typeof data === 'object' ? data : {};
        let result = new ErrorDetailsException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["message"] = this.message;
        data["stackTrace"] = this.stackTrace;
        data["innerExceptionMessage"] = this.innerExceptionMessage;
        super.toJSON(data);
        return data; 
    }
}

export interface IErrorDetailsException extends IErrorDetails {
    message?: string | undefined;
    stackTrace?: string | undefined;
    innerExceptionMessage?: string | undefined;
}

export class GetBodyInput implements IGetBodyInput {
    name?: string | undefined;

    constructor(data?: IGetBodyInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
        }
    }

    static fromJS(data: any): GetBodyInput {
        data = typeof data === 'object' ? data : {};
        let result = new GetBodyInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        return data; 
    }
}

export interface IGetBodyInput {
    name?: string | undefined;
}

export class ApiException extends Error {
    message: string;
    status: number; 
    response: string; 
    headers: { [key: string]: any; };
    result: any; 

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}