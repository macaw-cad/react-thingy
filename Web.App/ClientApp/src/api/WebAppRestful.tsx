/* Generated by restful-react */

import React from "react";
import { Get, GetProps, useGet, UseGetProps, Mutate, MutateProps, useMutate, UseMutateProps } from "restful-react";

export type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;

export interface AnimalLatinName {originalName?: string; latinName?: string}

export interface ServerRouteData {type?: PageType; carData?: Car; animalData?: Animal}

export type PageType = EnumByEnumeration & {[key: string]: any};

export interface EnumByEnumeration {name?: string; id: number}

export interface Car {year: number; make?: string; speed: number}

export interface Animal {name?: string; maxAge: number}

export interface StarWarsPerson {name?: string; weight: number; hairColor?: string}

export type JsonServerJsonServerProps = Omit<MutateProps<void, unknown, void, void>, "path" | "verb"> & {jsonServerRequest: string};

// Execute an JsonServer query.
export const JsonServerJsonServer = ({jsonServerRequest, ...props}: JsonServerJsonServerProps) => (
  <Mutate<void, unknown, void, void>
    verb="POST"
    path={`/mockapi/${jsonServerRequest}`}
    {...props}
  />
);

export type UseJsonServerJsonServerProps = Omit<UseMutateProps<void, void, void>, "path" | "verb"> & {jsonServerRequest: string};

// Execute an JsonServer query.
export const useJsonServerJsonServer = ({jsonServerRequest, ...props}: UseJsonServerJsonServerProps) => useMutate<void, unknown, void, void>("POST", `/mockapi/${jsonServerRequest}`, props);


export type JsonServerJsonServer2Props = Omit<GetProps<void, unknown, void>, "path"> & {jsonServerRequest: string};

// Execute an JsonServer query.
export const JsonServerJsonServer2 = ({jsonServerRequest, ...props}: JsonServerJsonServer2Props) => (
  <Get<void, unknown, void>
    path={`/mockapi/${jsonServerRequest}`}
    {...props}
  />
);

export type UseJsonServerJsonServer2Props = Omit<UseGetProps<void, void>, "path"> & {jsonServerRequest: string};

// Execute an JsonServer query.
export const useJsonServerJsonServer2 = ({jsonServerRequest, ...props}: UseJsonServerJsonServer2Props) => useGet<void, unknown, void>(`/mockapi/${jsonServerRequest}`, props);


export type HypernovaComponentServerHypernovaProps = Omit<MutateProps<void, unknown, void, void>, "path" | "verb"> & {hypernovaComponentServerRequest: string};

// Execute a HypernovaComponentServer action.
export const HypernovaComponentServerHypernova = ({hypernovaComponentServerRequest, ...props}: HypernovaComponentServerHypernovaProps) => (
  <Mutate<void, unknown, void, void>
    verb="POST"
    path={`/componentserver/${hypernovaComponentServerRequest}`}
    {...props}
  />
);

export type UseHypernovaComponentServerHypernovaProps = Omit<UseMutateProps<void, void, void>, "path" | "verb"> & {hypernovaComponentServerRequest: string};

// Execute a HypernovaComponentServer action.
export const useHypernovaComponentServerHypernova = ({hypernovaComponentServerRequest, ...props}: UseHypernovaComponentServerHypernovaProps) => useMutate<void, unknown, void, void>("POST", `/componentserver/${hypernovaComponentServerRequest}`, props);


export type HypernovaComponentServerHypernova2Props = Omit<GetProps<void, unknown, void>, "path"> & {hypernovaComponentServerRequest: string};

// Execute a HypernovaComponentServer action.
export const HypernovaComponentServerHypernova2 = ({hypernovaComponentServerRequest, ...props}: HypernovaComponentServerHypernova2Props) => (
  <Get<void, unknown, void>
    path={`/componentserver/${hypernovaComponentServerRequest}`}
    {...props}
  />
);

export type UseHypernovaComponentServerHypernova2Props = Omit<UseGetProps<void, void>, "path"> & {hypernovaComponentServerRequest: string};

// Execute a HypernovaComponentServer action.
export const useHypernovaComponentServerHypernova2 = ({hypernovaComponentServerRequest, ...props}: UseHypernovaComponentServerHypernova2Props) => useGet<void, unknown, void>(`/componentserver/${hypernovaComponentServerRequest}`, props);


export interface AnimalLatinNameGetQueryParams {animalName?: string}

export type AnimalLatinNameGetProps = Omit<GetProps<AnimalLatinName, unknown, AnimalLatinNameGetQueryParams>, "path">;

// Translate animal name to Latin.
export const AnimalLatinNameGet = (props: AnimalLatinNameGetProps) => (
  <Get<AnimalLatinName, unknown, AnimalLatinNameGetQueryParams>
    path={`/api/animallatinname`}
    {...props}
  />
);

export type UseAnimalLatinNameGetProps = Omit<UseGetProps<AnimalLatinName, AnimalLatinNameGetQueryParams>, "path">;

// Translate animal name to Latin.
export const useAnimalLatinNameGet = (props: UseAnimalLatinNameGetProps) => useGet<AnimalLatinName, unknown, AnimalLatinNameGetQueryParams>(`/api/animallatinname`, props);


export interface ServerRouteGetServerRouteQueryParams {route?: string}

export type ServerRouteGetServerRouteProps = Omit<GetProps<ServerRouteData, void, ServerRouteGetServerRouteQueryParams>, "path">;

// Get routing information based on the Uri.
export const ServerRouteGetServerRoute = (props: ServerRouteGetServerRouteProps) => (
  <Get<ServerRouteData, void, ServerRouteGetServerRouteQueryParams>
    path={`/api/serverroute`}
    {...props}
  />
);

export type UseServerRouteGetServerRouteProps = Omit<UseGetProps<ServerRouteData, ServerRouteGetServerRouteQueryParams>, "path">;

// Get routing information based on the Uri.
export const useServerRouteGetServerRoute = (props: UseServerRouteGetServerRouteProps) => useGet<ServerRouteData, void, ServerRouteGetServerRouteQueryParams>(`/api/serverroute`, props);


export interface StarWarsGetPeopleQueryParams {query?: string}

export type StarWarsGetPeopleProps = Omit<GetProps<StarWarsPerson[], unknown, StarWarsGetPeopleQueryParams>, "path">;


export const StarWarsGetPeople = (props: StarWarsGetPeopleProps) => (
  <Get<StarWarsPerson[], unknown, StarWarsGetPeopleQueryParams>
    path={`/api/starwars/people`}
    {...props}
  />
);

export type UseStarWarsGetPeopleProps = Omit<UseGetProps<StarWarsPerson[], StarWarsGetPeopleQueryParams>, "path">;


export const useStarWarsGetPeople = (props: UseStarWarsGetPeopleProps) => useGet<StarWarsPerson[], unknown, StarWarsGetPeopleQueryParams>(`/api/starwars/people`, props);

